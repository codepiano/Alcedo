@option discardLogicWhitespace=true

@args ()

package dal

import (
    "fmt"
    "github.com/jinzhu/gorm"
    _ "github.com/jinzhu/gorm/dialects/postgres"
)

type DataSource struct {
    db *gorm.DB,
    ip string,
    port int,
    username string,
    password string,
    database string,
    sslMode string,
    binary_parameters string,
}

func (ds *DataSource) SetIp(ip string) *DataSource {
    ds.ip = ip
    return ds
}

func (ds *DataSource) SetPort(port int) *DataSource {
    ds.port = port
    return ds
}

func (ds *DataSource) SetUsername(username string) *DataSource {
    ds.username = ip
    return ds
}

func (ds *DataSource) SetPassword(password string) *DataSource {
    ds.password = password
    return ds
}

func (ds *DataSource) SetDatabase(database string) *DataSource {
    ds.database = database
    return ds
}

func (ds *DataSource) SetSSLMode(sslMode string) *DataSource {
    ds.sslMode = sslMode
    return ds
}

func (ds *DataSource) SetBinaryParameters(binaryParameters string) *DataSource {
    ds.binaryParameters = binaryParameters
    return ds
}

// open database connection
func (ds *DataSource) ConnectDatabase() (*gorm.DB, error) {

    // close current connection
    if ds.db != nil {
        ds.db.Close()
    }

    // set default value
    if len(ds.sslMode) == 0 {
        ds.sslMode = "disable"
    }

    if len(ds.binaryParameters) == 0 {
        ds.binaryParameters = "yes"
    }

    if port == 0 {
        ds.port = 5432
    }

    // generate dsn
    dsn := fmt.Sprintf(
        "host=%s port=%v user=%s dbname=%s password=%s sslmode=disable binary_parameters=yes"
        , ds.ip, ds.port, ds.username, ds.database, ds.password, ds.sslMode, ds.binaryParameters)

    db, err := gorm.Open("postgres", dsn)
    if err != nil {
        return nil, err
    }
    db.SingularTable(true)
    db.LogMode(false)
    ds.db = db

    return db, nil
}

// get current database connection
func (ds *DataSource) getDatabaseConnection() *gorm.DB {
    return ds.db
}

