@option discardLogicWhitespace=true

@import com.codepiano.deduction.tool.*
@import com.codepiano.deduction.models.*
@import java.util.*

@args (List<TableDescription> tables)

package dal

import (
    "fmt"
    "github.com/jinzhu/gorm"
    _ "github.com/jinzhu/gorm/dialects/postgres"
)

var stdDBAccess *DBAccess

type DBAccess struct {
    db            *gorm.DB
    @for (table : tables) {
    @with (name = NameTransfer.transferToCamelCase(table.getTableName())) {
    @(name)Name           *@(name)DBAccess
    }
    }
}

func (da *DBAccess) DB() *gorm.DB {
    return da.db
}

// ConnectDB is used to open database connection
func ConnectDB(ip string, port int, username string, password string, dbname string) error {

    if stdDBAccess != nil {
        stdDBAccess.db.Close()
    }

    dsn := fmt.Sprintf("host=%s port=%v user=%s dbname=%s password=%s sslmode=disable binary_parameters=yes", ip, port, username, dbname, password)

    db, err := gorm.Open("postgres", dsn)
    if err != nil {
        return err
    }
    db.SingularTable(true)
    db.LogMode(false)

    stdDBAccess = &DBAccess{
        db: db,
        @for (table : tables) {
        @with (name = NameTransfer.transferToCamelCase(table.getTableName())) {
        @(name): &@(name)DBAccess{
            db: db,
        },
        }
        }
    }

    return nil
}

func CurrentDBAccess() *DBAccess {
    return stdDBAccess
}
