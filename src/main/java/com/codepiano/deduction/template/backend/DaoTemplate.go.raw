@option discardLogicWhitespace=true

@import com.codepiano.deduction.tool.*
@import com.codepiano.deduction.models.*
@import com.codepiano.deduction.template.backend.*
@import java.util.*

@args (Map<String,String> packages, TableDescription table, String packageName)

@with(modelName = NameTransfer.transferToCamelCase(table.getTableName()),
        variableName = NameTransfer.transferToVariableName(table.getTableName())){

package @packageName

import (
    "time"
    "github.com/jinzhu/gorm"
    "@(packages.get("bean"))"
    "@(packages.get("common"))"
)

type @(modelName)DBAccess struct {
    db *gorm.DB
}

// 分页查询@(modelName)
func (@(variableName)DB *@(modelName)DBAccess) List(pageNum, pageSize int, tx *gorm.DB) ([]*db.@(modelName), int, error) {
	var dbConn = @(variableName)DB.db
	if tx != nil {
		dbConn = tx
	}
    @(variableName)List := []*db.@(modelName){}
    var count int
    query := dbConn.Model(&db.@(modelName){})
    isPagingQuery := pageNum > 0 && pageSize > 0
    // 分页查询
    if isPagingQuery {
        // 先查询总数
        if err := query.Count(&count).Error; err != nil {
            return @(variableName)List, 0, err
        }
        query = query.Offset((pageNum - 1) * pageSize).Limit(pageSize)
    }
    err := query.Find(&@(variableName)List).Error
    if err != nil {
        if gorm.IsRecordNotFoundError(err) {
            return @(variableName)List, 0, nil
        }
        return @(variableName)List, 0, err
    }
    if !isPagingQuery {
        return @(variableName)List, len(@(variableName)List), err
    }
    return @(variableName)List, count, nil
}

// 创建@(modelName)
func (@(variableName)DB *@(modelName)DBAccess) Create(@(variableName) *db.@(modelName), tx *gorm.DB) error {
	var dbConn = @(variableName)DB.db
	if tx != nil {
		dbConn = tx
	}
    err := dbConn.Create(@(variableName)).Error
    if err != nil {
        return err
    }
    return nil
}

// 删除@(modelName)
func (@(variableName)DB *@(modelName)DBAccess) Delete(id uint64, deleteBy uint64, tx *gorm.DB) (*db.@(modelName), error) {
	var dbConn = @(variableName)DB.db
	if tx != nil {
		dbConn = tx
	}
    // 查询
    @(variableName), err := @(variableName)DB.GetById(id, tx)
    if err != nil {
        return nil, err
    }
    // 更新删除人
    @(variableName).DeletedBy = deleteBy
    err = @(variableName)DB.Update(@(variableName), deleteBy, tx)
    if err != nil {
        return nil, err
    }
    // 执行 soft delete
    err = dbConn.Delete(@(variableName)).Error
    if err != nil {
        return nil, err
    }
    return @(variableName), nil
}

// 通过 id 查询@(modelName)
func (@(variableName)DB *@(modelName)DBAccess) GetById(id uint64, tx *gorm.DB) (*db.@(modelName), error) {
	var dbConn = @(variableName)DB.db
	if tx != nil {
		dbConn = tx
	}
    @(variableName) := &db.@(modelName){}
    err := dbConn.First(@(variableName), id).Error
    if err != nil {
        return nil, err
    }
    return @(variableName), nil
}

// 修改@(modelName)信息
func (@(variableName)DB *@(modelName)DBAccess) Update(@(variableName) *db.@(modelName), updateBy uint64, tx *gorm.DB) error {
	var dbConn = @(variableName)DB.db
	if tx != nil {
		dbConn = tx
	}
    // 更新删除人
    @(variableName).UpdatedBy = updateBy
    now := common.Time(time.Now())
    @(variableName).UpdatedAt = now
    err := dbConn.Save(@(variableName)).Error
    if err != nil {
        return err
    }
    return nil
}

@DaoIndexOperationTemplate.template(table.getIndexes(), table.getTableName())

}
