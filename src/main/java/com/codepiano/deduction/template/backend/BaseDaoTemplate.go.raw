@option discardLogicWhitespace=true

@import com.codepiano.deduction.tool.*
@import com.codepiano.deduction.models.*
@import java.util.*

@args (List<TableDescription> tables, String packageName, String commonFullPath, String commonPackageName)

package @packageName

import (
    "fmt"
    "github.com/jinzhu/gorm"
    _ "github.com/jinzhu/gorm/dialects/postgres"
    "@commonFullPath"
)

var stdDBAccess *DBAccess

type DBAccess struct {
    db            *gorm.DB
    @for (table : tables) {
        @with (name = NameTransfer.transferToCamelCase(table.getTableName())) {
    @(name)           *@(name)DBAccess
        }
    }
}

func (da *DBAccess) DB() *gorm.DB {
    return da.db
}

// ConnectDB is used to open database connection
func ConnectDB(ip string, port int, username string, password string, dbname string) error {

    if stdDBAccess != nil {
        stdDBAccess.db.Close()
    }

    dsn := fmt.Sprintf("host=%s port=%v user=%s dbname=%s password=%s sslmode=disable binary_parameters=yes", ip, port, username, dbname, password)

    db, err := gorm.Open("postgres", dsn)
    if err != nil {
        return err
    }
    db.SingularTable(true)
    db.LogMode(false)

    stdDBAccess = &DBAccess{
        db: db,
        @for (table : tables) {
            @with (name = NameTransfer.transferToCamelCase(table.getTableName())) {
        @(name): &@(name)DBAccess{
            db: db,
        },
            }
        }
    }

    return nil
}

func CurrentDBAccess() *DBAccess {
    return stdDBAccess
}

func injectTraceLogger(db *gorm.DB, ctx context.Context) *gorm.DB {
	logger, exists := ctx.Value(@commonPackageName.TraceLogger)
	if exists {
		db.SetLogger(logger.(*logrus.Entry))
		return db
	}
	panic(errors.WithStack(errors.Errorf("logger is nil!")))
}

func GetDB(ctx gin.Context) *gorm.DB {
	var tx *gorm.DB
	txObj, exists := ctx.Value(@commonPackageName.Transaction)
	if exists {
		tx = txObj.(*gorm.DB)
	}
	if tx != nil {
		// tx 在初始化的时候已经注入过 trace logger
		return tx
	}
	// 克隆，不会克隆底层的 sqldb 对象，不用担心连接池问题
	db := StdDBAccess.db.New()
	// 注入trace logger
	return injectTraceLogger(db, ctx)
}
