@option discardLogicWhitespace=true

@import com.codepiano.deduction.tool.*
@import com.codepiano.deduction.models.*
@import java.util.*

@args (Map<String, String> packages,
         Map<String,String> packageName,
         TableDescription table,
         Set<String> excludes)

@with(beanPackage = packageName.get("bean"),
        errorPackage = packageName.get("error"),
        httpPackage = packageName.get("http"),
        modelName = NameTransfer.transferToCamelCase(table.getTableName()),
        variableName = NameTransfer.transferToVariableName(table.getTableName())){

package @packageName.get("service")

import (
    "time"
    "github.com/jinzhu/gorm"
    "github.com/lib/pq"
    "@(packages.get("bean"))"
    "@(packages.get("error"))"
    "@(packages.get("constant"))"
    "@(packages.get("common"))"
)

func (srv *Service) Get@(modelName)ByID(ctx context.Context, id uint64) (*@(beanPackage).@(modelName), error) {
    var @(variableName) *@(beanPackage).@(modelName)
    var err error
    err = srv.JoinIfExistsTransaction(ctx, func(tx *gorm.DB) error {
        @(variableName), err = srv.DB.@(modelName).GetById(ctx, id)
        if err != nil {
            if gorm.IsRecordNotFoundError(err) {
                return &@(errorPackage).Error{Code: @(errorPackage).RequestDataNotExisted}
            }
            srv.Logger(ctx).Errorf("db error occurred when querying service! %+v", err)
            return &@(errorPackage).Error{Code: @(errorPackage).InternalServerError}
        }
        return nil
    })
    if err != nil {
        return nil, err
    }
    return @(variableName), nil
}

// 获取 @modelName 列表
func (srv *Service) Get@(modelName)List(ctx context.Context, pageNum, pageSize int) ([]*@(beanPackage).@(modelName), int, error) {
    var @(variableName)List []*@(beanPackage).@(modelName)
    var count *int
    var err error
    err = srv.JoinIfExistsTransaction(ctx, func(tx *gorm.DB) error {
        @(variableName)List, *count, err = srv.DB.@(modelName).List(ctx, pageNum, pageSize)
        if err != nil {
            srv.Logger(ctx).Errorf("db error occurred when querying @(variableName)! %+v", err)
            return &@(errorPackage).Error{Code: @(errorPackage).InternalServerError}
        }
        return nil
    })
    if err != nil {
        return nil, 0, err
    }
    return @(variableName)List, *count, nil
}

// 创建 @modelName
func (srv *Service) Create@(modelName)(ctx context.Context, param *@(httpPackage).@(modelName)Param, user *rest.LoginUser) (*@(beanPackage).@(modelName), error) {
    @(variableName) := &@(beanPackage).@(modelName){}
    @for (column : table.getColumns()) {
        @if(!excludes.contains(column.getColumnName())) {
    @(variableName).@NameTransfer.transferToCamelCase(column.getColumnName()) = param.@NameTransfer.transferToCamelCase(column.getColumnName())
        }
    }
    now := common.Time(time.Now())
    @(variableName).CreatedBy = user.ID
    @(variableName).CreatedAt = &now
    @(variableName).UpdatedBy = user.ID
    @(variableName).UpdatedAt = &now
    err := srv.BeginOrJoinTransaction(ctx, func(tx *gorm.DB) error {
        err := srv.DB.@(modelName).Create(ctx, @(variableName))
        if err != nil {
            if pgErr, ok := err.(*pq.Error); ok {
                if pgErr.Code.Name() == constant.UNIQUE_VIOLATION {
                    return &@(errorPackage).Error{Code: @(errorPackage).RequestDataExists}
                }
            }
            srv.Logger(ctx).Errorf("db error occurred when creating %+v! error: %+v", @(variableName), err)
            return &@(errorPackage).Error{Code: @(errorPackage).InternalServerError}
        }
        return nil
    })
    if err != nil {
        return nil, err
    }
    return @(variableName), nil
}

// 删除 @modelName
func (srv *Service) Delete@(modelName)(ctx context.Context, id uint64, deleteBy uint64) (*@(beanPackage).@(modelName), error) {
    var @(variableName) *@(beanPackage).@(modelName)
    err := srv.BeginOrJoinTransaction(ctx, func(tx *gorm.DB) error {
        // 获取 @modelName
        _, err := srv.Get@(modelName)ByID(ctx, id)
        if err != nil {
            return err
        }
        @(variableName), err = srv.DB.@(modelName).Delete(ctx, id, deleteBy)
        if err != nil {
            if gorm.IsRecordNotFoundError(err) {
                return &@(errorPackage).Error{Code: @(errorPackage).RequestDataNotExisted}
            }
            srv.Logger(ctx).Errorf("db error occurred when deleting @(variableName)! id: %d, error: %+v", id, err)
            return &@(errorPackage).Error{Code: @(errorPackage).InternalServerError}
        }
        return nil
    })
    if err != nil {
        return nil, err
    }
    return @(variableName), nil
}

// 更新 @modelName
func (srv *Service) Update@(modelName)(ctx context.Context, id uint64, param *@(httpPackage).@(modelName)Param, user *rest.LoginUser) (*@(beanPackage).@(modelName), error) {
    var @(variableName) *@(beanPackage).@(modelName)
    err := srv.BeginOrJoinTransaction(ctx, func(tx *gorm.DB) error {
        @(variableName), err := srv.DB.@(modelName).GetById(ctx, id)
        if err != nil {
            if gorm.IsRecordNotFoundError(err) {
                return &rest.Error{Code: rest.RequestDataNotExisted}
            }
            srv.Logger(ctx).Errorf("db error when update @modelName info instance! error: %+v", err)
            return &rest.Error{Code: rest.InternalServerError}
        }
        err = srv.DB.@(modelName).Update(ctx, @(variableName), user.ID)
        if err != nil {
            if gorm.IsRecordNotFoundError(err) {
                return &@(errorPackage).Error{Code: @(errorPackage).RequestDataNotExisted}
            }
            srv.Logger(ctx).Errorf("db error occurred when updating @(variableName)! error: %+v", err)
            return &@(errorPackage).Error{Code: @(errorPackage).InternalServerError}
        }
        return nil
    })
    if err != nil {
        return nil, err
    }
    return @(variableName), nil
}
}
