@option discardLogicWhitespace=true

@import com.codepiano.deduction.tool.*
@import com.codepiano.deduction.models.*
@import java.util.*

@args (Map<String, String> packages, String servicePackage, String modelName, String variableName, String beanPackage, String errorPackage)

package @servicePackage

import (
    "github.com/jinzhu/gorm"
    "github.com/lib/pq"
    "@(packages.get("dao"))"
    "@(packages.get("bean"))"
    "@(packages.get("error"))"
    "@(packages.get("constant"))"
    "@(packages.get("common"))"
)

func (srv *Service) Get@(modelName)ByID(id uint64, tx *gorm.DB) (*@(beanPackage).@(modelName), error) {
    @(variableName), err := srv.DB.@(modelName).GetById(id, tx)
    if err != nil {
        if gorm.IsRecordNotFoundError(err) {
            return nil, &@(errorPackage).Error{Code: @(errorPackage).RequestDataNotExisted}
        }
        srv.Logger.Errorf("db error occurred when querying service! %+v", err)
        return nil, &@(errorPackage).Error{Code: @(errorPackage).InternalServerError}
    }
    return @(variableName), nil
}

// 获取 @modelName 列表
func (srv *Service) Get@(modelName)List(pageNum, pageSize int) ([]@(beanPackage).@(modelName), int, error) {
    @(variableName)List, count, err := srv.DB.@(modelName).List(pageNum, pageSize)
    if err != nil {
        srv.Logger.Errorf("db error occurred when querying @(variableName)! %+v", err)
        return nil, 0, &@(errorPackage).Error{Code: @(errorPackage).InternalServerError}
    }
    return @(variableName)List, count, nil
}

// 创建 @modelName
func (srv *Service) Create@(modelName)(@variableName *@(beanPackage).@(modelName), user *rest.LoginUser) (*@(beanPackage).@(modelName), error) {
    now := common.Time(time.Now())
    @(variableName).CreatedBy = user.ID,
    @(variableName).CreatedAt = now,
    @(variableName).UpdatedBy = user.ID,
    @(variableName).UpdatedAt = now,
    err := srv.DB.@(modelName).Create(@(variableName))
    if err != nil {
        if pgErr, ok := err.(*pq.Error); ok {
            if pgErr.Code.Name() == constant.UNIQUE_VIOLATION {
                return nil, &@(errorPackage).Error{Code: @(errorPackage).RequestDataExists}
            }
        }
        srv.Logger.Errorf("db error occurred when creating %+v! error: %+v", @(variableName), err)
        return nil, &@(errorPackage).Error{Code: @(errorPackage).InternalServerError}
    }
    return @(variableName), nil
}

// 删除 @modelName
func (srv *Service) Delete@(modelName)(id uint64, deleteBy user *rest.LoginUser) (*@(beanPackage).@(modelName), error) {
    var @(variableName) *db.@(modelName)
    err := srv.RunInTransaction(func(tx *gorm.DB) error {
        // 获取 @modelName
        _, err := srv.Get@(modelName)ByID(id, tx)
        if err != nil {
            return err
        }
        @(variableName), err = srv.DB.@(modelName).Delete(id, deleteBy, tx)
        if err != nil {
            if gorm.IsRecordNotFoundError(err) {
                return &@(errorPackage).Error{Code: @(errorPackage).RequestDataNotExisted}
            }
            srv.Logger.Errorf("db error occurred when deleting @(variableName)! id: %d, error: %+v", id, err)
            return &@(errorPackage).Error{Code: @(errorPackage).InternalServerError}
        }
        return nil
    })
    if err != nil {
        return nil, err
    }
    return @(variableName), nil
}

// 更新 @modelName
func (srv *Service) Update@(modelName)(id uint64, @(variableName) *@(beanPackage).@(modelName), user *rest.LoginUser) (*@(beanPackage).@(modelName), error) {
    @(variableName), err := srv.DB.@(modelName).GetById(id, nil)
    if err != nil {
        if gorm.IsRecordNotFoundError(err) {
            return nil, &rest.Error{Code: rest.RequestDataNotExisted}
        }
        srv.Logger.Errorf("db error when update @modelName info instance! error: %+v", err)
        return nil, &rest.Error{Code: rest.InternalServerError}
    }
    err = srv.DB.@(modelName).Update(@(variableName), user.ID, nil)
    if err != nil {
        if gorm.IsRecordNotFoundError(err) {
            return nil, &@(errorPackage).Error{Code: @(errorPackage).RequestDataNotExisted}
        }
        srv.Logger.Errorf("db error occurred when updating @(variableName)! error: %+v", err)
        return nil, &@(errorPackage).Error{Code: @(errorPackage).InternalServerError}
    }
    return @(variableName), nil
}
